   Compiling salsa v0.23.0 (/Users/micha/astral/salsa)
warning: unreachable pattern
   --> src/function/maybe_changed_after.rs:501:54
    |
489 |                     TryClaimHeadsResult::Running(running) => {
    |                     ------------------------------------- matches all the relevant values
...
501 |                     TryClaimHeadsResult::Finalized | TryClaimHeadsResult::Running(_) => {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `available_cycle_head`
   --> src/function/maybe_changed_after.rs:492:52
    |
492 |                     TryClaimHeadsResult::Available(available_cycle_head) => {
    |                                                    ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_available_cycle_head`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `available`
   --> src/function/memo.rs:203:52
    |
203 |                     TryClaimHeadsResult::Available(available) => {
    |                                                    ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_available`

warning: unused variable: `anyone_waiting`
  --> src/function/sync.rs:66:13
   |
66 |             anyone_waiting,
   |             ^^^^^^^^^^^^^^-
   |             |
   |             help: try removing the field

warning: unused variable: `is_transfer_target`
  --> src/function/sync.rs:67:13
   |
67 |             is_transfer_target,
   |             ^^^^^^^^^^^^^^^^^^-
   |             |
   |             help: try removing the field

warning: type `SyncTable` is more private than the item `<function::IngredientImpl<C> as Ingredient>::sync_table`
   --> src/function.rs:395:5
    |
395 |     fn sync_table(&self) -> &SyncTable {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `<function::IngredientImpl<C> as Ingredient>::sync_table` is reachable at visibility `pub`
    |
note: but type `SyncTable` is only usable at visibility `pub(crate)`
   --> src/function/sync.rs:14:1
    |
 14 | pub(crate) struct SyncTable {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(private_interfaces)]` on by default

warning: type `SyncTable` is more private than the item `Ingredient::sync_table`
   --> src/ingredient.rs:102:5
    |
102 |     fn sync_table(&self) -> &crate::function::SyncTable {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `Ingredient::sync_table` is reachable at visibility `pub`
    |
note: but type `SyncTable` is only usable at visibility `pub(crate)`
   --> src/function/sync.rs:14:1
    |
 14 | pub(crate) struct SyncTable {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method `nested` is never used
   --> src/cycle.rs:421:19
    |
420 | impl ProvisionalStatus {
    | ---------------------- method in this implementation
421 |     pub(crate) fn nested(&self) -> bool {
    |                   ^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `try_claim_heads` is never used
   --> src/function/memo.rs:228:19
    |
101 | impl<'db, C: Configuration> Memo<'db, C> {
    | ---------------------------------------- method in this implementation
...
228 |     pub(super) fn try_claim_heads(&self, zalsa: &Zalsa, zalsa_local: &ZalsaLocal) -> bool {
    |                   ^^^^^^^^^^^^^^^

warning: fields `database_key_index` and `ingredient` are never read
   --> src/function/memo.rs:555:5
    |
554 | pub(super) struct AvailableCycleHead<'me> {
    |                   ------------------ fields in this struct
555 |     database_key_index: DatabaseKeyIndex,
    |     ^^^^^^^^^^^^^^^^^^
556 |     _guard: ClaimGuard<'me>,
557 |     ingredient: &'me dyn Ingredient,
    |     ^^^^^^^^^^

warning: methods `is_nested` and `queue_cycle_heads` are never used
   --> src/function/memo.rs:561:19
    |
560 | impl<'a> AvailableCycleHead<'a> {
    | ------------------------------- methods in this implementation
561 |     pub(super) fn is_nested(&self, zalsa: &Zalsa) -> bool {
    |                   ^^^^^^^^^
...
567 |     pub(super) fn queue_cycle_heads(&self, cycle_heads: &mut TryClaimCycleHeadsIter<'a>) {
    |                   ^^^^^^^^^^^^^^^^^

warning: method `is_transferred` is never used
   --> src/function/sync.rs:188:14
    |
187 | impl OwnerId {
    | ------------ method in this implementation
188 |     const fn is_transferred(&self) -> bool {
    |              ^^^^^^^^^^^^^^

warning: `salsa` (lib) generated 12 warnings (run `cargo fix --lib -p salsa` to apply 2 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.42s
────────────
 Nextest run ID 25a7d6b1-a9dd-486f-9846-2680591f3411 with nextest profile: default
    Starting 1 test across 1 binary (8 tests skipped)
     SIGABRT [   0.331s] salsa::parallel cycle_nested_deep::the_test
  stdout ───

    running 1 test
    2025-10-02T12:12:04.732025Z DEBUG parallel::cycle_nested_deep: Starting new run
    2025-10-02T12:12:04.733661Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}: salsa::zalsa_local: report_tracked_read(input=query_a::interned_arguments(Id(0)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.733840Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}: salsa::function::execute: query_a(Id(0)): executing query
    2025-10-02T12:12:04.734004Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}: salsa::zalsa_local: report_tracked_read(input=query_b::interned_arguments(Id(400)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.734099Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::execute: query_b(Id(400)): executing query
    2025-10-02T12:12:04.734224Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::zalsa_local: report_tracked_read(input=query_c::interned_arguments(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.734315Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::execute: query_c(Id(800)): executing query
    2025-10-02T12:12:04.734440Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_d::interned_arguments(Id(c00)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.734543Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::execute: query_d(Id(c00)): executing query
    2025-10-02T12:12:04.734611Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::zalsa_local: report_tracked_read(input=query_c::interned_arguments(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.734678Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}: salsa::function::fetch: hit cycle at query_c(Id(800)), inserting and returning fixpoint initial value
    2025-10-02T12:12:04.734769Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.734802Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_c(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.734933Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::execute: query_d(Id(c00)): execute_maybe_iterate: result.revisions = QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: Derived(
            [
                Input(
                    query_c::interned_arguments(Id(800)),
                ),
                Input(
                    query_c(Id(800)),
                ),
            ],
        ),
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        0,
                    ),
                    cycle_converged: false,
                    nested_cycle: false,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.735005Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::sync: Transferring ownership of query_d(Id(c00)) to query_c(Id(800))
    2025-10-02T12:12:04.735038Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::runtime::dependency_graph: transitive_dependents of query query_d(Id(c00)): []
    2025-10-02T12:12:04.735062Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::runtime::dependency_graph: all dependents after transfer: [query_d(Id(c00))]
    2025-10-02T12:12:04.735074Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::runtime::dependency_graph: Unblocking transitive dependents of query query_d(Id(c00))
    2025-10-02T12:12:04.735089Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::sync: Acquired lock on syncs
    2025-10-02T12:12:04.735100Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::sync: Transfer ownership completed
    2025-10-02T12:12:04.735136Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.735155Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::zalsa_local: report_tracked_read(input=query_d(Id(c00)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.735254Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_e::interned_arguments(Id(1000)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.735315Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::function::execute: query_e(Id(1000)): executing query
    2025-10-02T12:12:04.735373Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::zalsa_local: report_tracked_read(input=query_c::interned_arguments(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.735434Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: FixpointInitial,
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            0,
                        ),
                        cycle_converged: false,
                        nested_cycle: false,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.735510Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: FixpointInitial,
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            0,
                        ),
                        cycle_converged: false,
                        nested_cycle: false,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.735574Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}:fetch{query=query_c(Id(800))}: salsa::function::fetch: hit cycle at query_c(Id(800)), returning last provisional value: QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: FixpointInitial,
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        0,
                    ),
                    cycle_converged: false,
                    nested_cycle: false,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.735636Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}:fetch{query=query_c(Id(800))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.735656Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_c(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.735755Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::function::execute: query_e(Id(1000)): execute_maybe_iterate: result.revisions = QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: Derived(
            [
                Input(
                    query_c::interned_arguments(Id(800)),
                ),
                Input(
                    query_c(Id(800)),
                ),
            ],
        ),
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        0,
                    ),
                    cycle_converged: false,
                    nested_cycle: false,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.735818Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::function::sync: Transferring ownership of query_e(Id(1000)) to query_c(Id(800))
    2025-10-02T12:12:04.735847Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::runtime::dependency_graph: transitive_dependents of query query_e(Id(1000)): []
    2025-10-02T12:12:04.735857Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::runtime::dependency_graph: all dependents after transfer: [query_e(Id(1000))]
    2025-10-02T12:12:04.735869Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::runtime::dependency_graph: Unblocking transitive dependents of query query_e(Id(1000))
    2025-10-02T12:12:04.735884Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::function::sync: Acquired lock on syncs
    2025-10-02T12:12:04.735893Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::function::sync: Transfer ownership completed
    2025-10-02T12:12:04.735924Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.735942Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_e(Id(1000))}: salsa::zalsa_local: report_tracked_read(input=query_e(Id(1000)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.735992Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_b::interned_arguments(Id(400)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.736071Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_b(Id(400))}: salsa::function::fetch: hit cycle at query_b(Id(400)), inserting and returning fixpoint initial value
    2025-10-02T12:12:04.736133Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_b(Id(400))}:block_on_heads: salsa::function::memo: Waiting for query_b(Id(400)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.736151Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_b(Id(400))}: salsa::zalsa_local: report_tracked_read(input=query_b(Id(400)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.736202Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_a::interned_arguments(Id(0)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.736265Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_a(Id(0))}: salsa::function::fetch: hit cycle at query_a(Id(0)), inserting and returning fixpoint initial value
    2025-10-02T12:12:04.736322Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_a(Id(0))}:block_on_heads: salsa::function::memo: Waiting for query_a(Id(0)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.736340Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_a(Id(0))}: salsa::zalsa_local: report_tracked_read(input=query_a(Id(0)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.736482Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::execute: query_c(Id(800)): execute: I am a cycle head, comparing last provisional value with new value
    2025-10-02T12:12:04.736513Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::execute: Detected nested cycle query_c(Id(800)), iterate it as part of the outer cycle query_b(Id(400))
    2025-10-02T12:12:04.736533Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::execute: query_c(Id(800)): execute_maybe_iterate: result.revisions = QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: Derived(
            [
                Input(
                    query_d::interned_arguments(Id(c00)),
                ),
                Input(
                    query_d(Id(c00)),
                ),
                Input(
                    query_e::interned_arguments(Id(1000)),
                ),
                Input(
                    query_e(Id(1000)),
                ),
                Input(
                    query_b::interned_arguments(Id(400)),
                ),
                Input(
                    query_b(Id(400)),
                ),
                Input(
                    query_a::interned_arguments(Id(0)),
                ),
                Input(
                    query_a(Id(0)),
                ),
            ],
        ),
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                            CycleHead {
                                database_key_index: query_b(Id(400)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                            CycleHead {
                                database_key_index: query_a(Id(0)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        0,
                    ),
                    cycle_converged: true,
                    nested_cycle: true,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.736649Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::sync: Transferring ownership of query_c(Id(800)) to query_b(Id(400))
    2025-10-02T12:12:04.736696Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::runtime::dependency_graph: transitive_dependents of query query_c(Id(800)): []
    2025-10-02T12:12:04.736712Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::runtime::dependency_graph: all dependents after transfer: [query_c(Id(800))]
    2025-10-02T12:12:04.736725Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::runtime::dependency_graph: Unblocking transitive dependents of query query_c(Id(800))
    2025-10-02T12:12:04.736741Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::sync: Acquired lock on syncs
    2025-10-02T12:12:04.736751Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::sync: Wake up blocked threads after transferring ownership to query_b(Id(400))
    2025-10-02T12:12:04.736768Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::runtime::dependency_graph: Unblocking runtimes blocked on query_c(Id(800)) with wait result Completed
    2025-10-02T12:12:04.736783Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::sync: Transfer ownership completed
    2025-10-02T12:12:04.736839Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:block_on_heads: salsa::function::memo: Waiting for query_a(Id(0)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.736853Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:block_on_heads: salsa::function::memo: Waiting for query_b(Id(400)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.736923Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle
    2025-10-02T12:12:04.736944Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_c(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.737149Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::execute: query_b(Id(400)): execute: I am a cycle head, comparing last provisional value with new value
    2025-10-02T12:12:04.737195Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::execute: Detected nested cycle query_b(Id(400)), iterate it as part of the outer cycle query_a(Id(0))
    2025-10-02T12:12:04.737233Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::execute: query_b(Id(400)): execute_maybe_iterate: result.revisions = QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: Derived(
            [
                Input(
                    query_c::interned_arguments(Id(800)),
                ),
                Input(
                    query_c(Id(800)),
                ),
            ],
        ),
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                            CycleHead {
                                database_key_index: query_b(Id(400)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                            CycleHead {
                                database_key_index: query_a(Id(0)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: false,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        0,
                    ),
                    cycle_converged: false,
                    nested_cycle: true,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.737325Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::sync: Transferring ownership of query_b(Id(400)) to query_a(Id(0))
    2025-10-02T12:12:04.737353Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::runtime::dependency_graph: transitive_dependents of query query_b(Id(400)): []
    2025-10-02T12:12:04.737364Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::runtime::dependency_graph: all dependents after transfer: [query_b(Id(400))]
    2025-10-02T12:12:04.737372Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::runtime::dependency_graph: Unblocking transitive dependents of query query_b(Id(400))
    2025-10-02T12:12:04.737385Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::sync: Acquired lock on syncs
    2025-10-02T12:12:04.737394Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::sync: Wake up blocked threads after transferring ownership to query_a(Id(0))
    2025-10-02T12:12:04.737409Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::runtime::dependency_graph: Unblocking runtimes blocked on query_b(Id(400)) with wait result Completed
    2025-10-02T12:12:04.737423Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::sync: Transfer ownership completed
    2025-10-02T12:12:04.737467Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:block_on_heads: salsa::function::memo: Waiting for query_a(Id(0)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.737521Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:block_on_heads: salsa::function::memo: Waiting for query_b(Id(400)) results in a cycle
    2025-10-02T12:12:04.737571Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle
    2025-10-02T12:12:04.737590Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::zalsa_local: report_tracked_read(input=query_b(Id(400)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.737777Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}: salsa::function::execute: query_a(Id(0)): execute: I am a cycle head, comparing last provisional value with new value
    2025-10-02T12:12:04.737863Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}: salsa::function::execute: query_a(Id(0)): execute: iterate again (IterationCount(1))...
    2025-10-02T12:12:04.737975Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}: salsa::zalsa_local: report_tracked_read(input=query_b::interned_arguments(Id(400)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.738026Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::maybe_changed_after: query_b(Id(400)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: false,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738119Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::maybe_changed_after: query_b(Id(400)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: false,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738235Z TRACE t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::maybe_changed_after: query_b(Id(400)): validate_provisional(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: false,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738347Z TRACE t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::maybe_changed_after: query_b(Id(400)): validate_same_iteration(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: false,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738434Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::memo: Waiting for query_a(Id(0)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.738470Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::function::execute: query_b(Id(400)): executing query
    2025-10-02T12:12:04.738550Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}: salsa::zalsa_local: report_tracked_read(input=query_c::interned_arguments(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.738591Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_d::interned_arguments(Id(c00)),
                    ),
                    Input(
                        query_d(Id(c00)),
                    ),
                    Input(
                        query_e::interned_arguments(Id(1000)),
                    ),
                    Input(
                        query_e(Id(1000)),
                    ),
                    Input(
                        query_b::interned_arguments(Id(400)),
                    ),
                    Input(
                        query_b(Id(400)),
                    ),
                    Input(
                        query_a::interned_arguments(Id(0)),
                    ),
                    Input(
                        query_a(Id(0)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: true,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738702Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_d::interned_arguments(Id(c00)),
                    ),
                    Input(
                        query_d(Id(c00)),
                    ),
                    Input(
                        query_e::interned_arguments(Id(1000)),
                    ),
                    Input(
                        query_e(Id(1000)),
                    ),
                    Input(
                        query_b::interned_arguments(Id(400)),
                    ),
                    Input(
                        query_b(Id(400)),
                    ),
                    Input(
                        query_a::interned_arguments(Id(0)),
                    ),
                    Input(
                        query_a(Id(0)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: true,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738811Z TRACE t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): validate_provisional(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_d::interned_arguments(Id(c00)),
                    ),
                    Input(
                        query_d(Id(c00)),
                    ),
                    Input(
                        query_e::interned_arguments(Id(1000)),
                    ),
                    Input(
                        query_e(Id(1000)),
                    ),
                    Input(
                        query_b::interned_arguments(Id(400)),
                    ),
                    Input(
                        query_b(Id(400)),
                    ),
                    Input(
                        query_a::interned_arguments(Id(0)),
                    ),
                    Input(
                        query_a(Id(0)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: true,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.738933Z TRACE t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): validate_same_iteration(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_d::interned_arguments(Id(c00)),
                    ),
                    Input(
                        query_d(Id(c00)),
                    ),
                    Input(
                        query_e::interned_arguments(Id(1000)),
                    ),
                    Input(
                        query_e(Id(1000)),
                    ),
                    Input(
                        query_b::interned_arguments(Id(400)),
                    ),
                    Input(
                        query_b(Id(400)),
                    ),
                    Input(
                        query_a::interned_arguments(Id(0)),
                    ),
                    Input(
                        query_a(Id(0)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: true,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739035Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::memo: Waiting for query_a(Id(0)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.739073Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::function::execute: query_c(Id(800)): executing query
    2025-10-02T12:12:04.739154Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_d::interned_arguments(Id(c00)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.739205Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::maybe_changed_after: query_d(Id(c00)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            0,
                        ),
                        cycle_converged: false,
                        nested_cycle: false,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739287Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::maybe_changed_after: query_d(Id(c00)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            0,
                        ),
                        cycle_converged: false,
                        nested_cycle: false,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739355Z TRACE t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::maybe_changed_after: query_d(Id(c00)): validate_provisional(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            0,
                        ),
                        cycle_converged: false,
                        nested_cycle: false,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739440Z TRACE t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::maybe_changed_after: query_d(Id(c00)): validate_same_iteration(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_c::interned_arguments(Id(800)),
                    ),
                    Input(
                        query_c(Id(800)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            0,
                        ),
                        cycle_converged: false,
                        nested_cycle: false,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739508Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.739533Z  INFO t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::execute: query_d(Id(c00)): executing query
    2025-10-02T12:12:04.739593Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::zalsa_local: report_tracked_read(input=query_c::interned_arguments(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.739635Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_d::interned_arguments(Id(c00)),
                    ),
                    Input(
                        query_d(Id(c00)),
                    ),
                    Input(
                        query_e::interned_arguments(Id(1000)),
                    ),
                    Input(
                        query_e(Id(1000)),
                    ),
                    Input(
                        query_b::interned_arguments(Id(400)),
                    ),
                    Input(
                        query_b(Id(400)),
                    ),
                    Input(
                        query_a::interned_arguments(Id(0)),
                    ),
                    Input(
                        query_a(Id(0)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: true,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739746Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}: salsa::function::maybe_changed_after: query_c(Id(800)): shallow_verify_memo(memo = Memo {
        value: "Some(<value>)",
        verified_at: AtomicRevision {
            data: 1,
        },
        revisions: QueryRevisions {
            changed_at: R1,
            durability: Durability::HIGH,
            origin: Derived(
                [
                    Input(
                        query_d::interned_arguments(Id(c00)),
                    ),
                    Input(
                        query_d(Id(c00)),
                    ),
                    Input(
                        query_e::interned_arguments(Id(1000)),
                    ),
                    Input(
                        query_e(Id(1000)),
                    ),
                    Input(
                        query_b::interned_arguments(Id(400)),
                    ),
                    Input(
                        query_b(Id(400)),
                    ),
                    Input(
                        query_a::interned_arguments(Id(0)),
                    ),
                    Input(
                        query_a(Id(0)),
                    ),
                ],
            ),
            accumulated_inputs: AtomicInputAccumulatedValues(
                false,
            ),
            verified_final: false,
            extra: QueryRevisionsExtra(
                Some(
                    QueryRevisionsExtraInner {
                        accumulated: AccumulatedMap {
                            map: [],
                        },
                        tracked_struct_ids: [],
                        cycle_heads: CycleHeads(
                            [
                                CycleHead {
                                    database_key_index: query_c(Id(800)),
                                    iteration_count: AtomicIterationCount(
                                        1,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_b(Id(400)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                                CycleHead {
                                    database_key_index: query_a(Id(0)),
                                    iteration_count: AtomicIterationCount(
                                        0,
                                    ),
                                    removed: false,
                                },
                            ],
                        ),
                        iteration: AtomicIterationCount(
                            1,
                        ),
                        cycle_converged: true,
                        nested_cycle: true,
                    },
                ),
            ),
        },
    })
    2025-10-02T12:12:04.739846Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}: salsa::function::fetch: hit cycle at query_c(Id(800)), returning last provisional value: QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: Derived(
            [
                Input(
                    query_d::interned_arguments(Id(c00)),
                ),
                Input(
                    query_d(Id(c00)),
                ),
                Input(
                    query_e::interned_arguments(Id(1000)),
                ),
                Input(
                    query_e(Id(1000)),
                ),
                Input(
                    query_b::interned_arguments(Id(400)),
                ),
                Input(
                    query_b(Id(400)),
                ),
                Input(
                    query_a::interned_arguments(Id(0)),
                ),
                Input(
                    query_a(Id(0)),
                ),
            ],
        ),
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    1,
                                ),
                                removed: false,
                            },
                            CycleHead {
                                database_key_index: query_b(Id(400)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: true,
                            },
                            CycleHead {
                                database_key_index: query_a(Id(0)),
                                iteration_count: AtomicIterationCount(
                                    0,
                                ),
                                removed: true,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        1,
                    ),
                    cycle_converged: true,
                    nested_cycle: false,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.739947Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}:block_on_heads: salsa::function::memo: Waiting for query_c(Id(800)) results in a cycle (because it is already in the query stack)
    2025-10-02T12:12:04.739966Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}:fetch{query=query_c(Id(800))}: salsa::zalsa_local: report_tracked_read(input=query_c(Id(800)), durability=Durability(2), changed_at=R1)
    2025-10-02T12:12:04.740053Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::execute: query_d(Id(c00)): execute_maybe_iterate: result.revisions = QueryRevisions {
        changed_at: R1,
        durability: Durability::HIGH,
        origin: Derived(
            [
                Input(
                    query_c::interned_arguments(Id(800)),
                ),
                Input(
                    query_c(Id(800)),
                ),
            ],
        ),
        accumulated_inputs: AtomicInputAccumulatedValues(
            false,
        ),
        verified_final: false,
        extra: QueryRevisionsExtra(
            Some(
                QueryRevisionsExtraInner {
                    accumulated: AccumulatedMap {
                        map: [],
                    },
                    tracked_struct_ids: [],
                    cycle_heads: CycleHeads(
                        [
                            CycleHead {
                                database_key_index: query_c(Id(800)),
                                iteration_count: AtomicIterationCount(
                                    1,
                                ),
                                removed: false,
                            },
                        ],
                    ),
                    iteration: AtomicIterationCount(
                        0,
                    ),
                    cycle_converged: false,
                    nested_cycle: false,
                },
            ),
        ),
    }
    2025-10-02T12:12:04.740132Z DEBUG t1{thread_id=ThreadId { task_id: main-thread(1) }}:fetch{query=query_a(Id(0))}:fetch{query=query_b(Id(400))}:fetch{query=query_c(Id(800))}:fetch{query=query_d(Id(c00))}: salsa::function::sync: Transferring ownership of query_d(Id(c00)) to query_c(Id(800))
  stderr ───
    WARNING: Shuttle only correctly models SeqCst atomics and treats all other Orderings as if they were SeqCst. Bugs caused by weaker orderings like Acquire may be missed. See https://docs.rs/shuttle/*/shuttle/sync/atomic/index.html#warning-about-relaxed-behaviors for details or to disable this warning.
    test panicked in task 'task-1'
    failing schedule:
    "
    91019c0bf3908ce795e7b3842300000000000000000000000000000000000000000000000000
    00000080aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    "
    pass that string to `shuttle::replay` to replay the failure

    thread 'cycle_nested_deep::the_test' panicked at src/runtime/dependency_graph.rs:193:17:
    Can't transfer the query query_d(Id(c00)) twice
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    thread 'cycle_nested_deep::the_test' panicked at src/sync.rs:18:27:
    called `Result::unwrap()` on an `Err` value: PoisonError { .. }
    stack backtrace:
       0:        0x10305b3ec - std::backtrace_rs::backtrace::libunwind::trace::h72f4b72e0962905d
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/../../backtrace/src/backtrace/libunwind.rs:117:9
       1:        0x10305b3ec - std::backtrace_rs::backtrace::trace_unsynchronized::hff394536698b6b10
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/../../backtrace/src/backtrace/mod.rs:66:14
       2:        0x10305b3ec - std::sys::backtrace::_print_fmt::h64d1e3035850353e
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/sys/backtrace.rs:66:9
       3:        0x10305b3ec - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::hf35f9734f9a29483
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/sys/backtrace.rs:39:26
       4:        0x103077270 - core::fmt::rt::Argument::fmt::hedf6f2a66f855f69
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/fmt/rt.rs:173:76
       5:        0x103077270 - core::fmt::write::h60ec6633daab7b35
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/fmt/mod.rs:1468:25
       6:        0x103058f1c - std::io::default_write_fmt::h0e30d7b1295222cb
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/io/mod.rs:639:11
       7:        0x103058f1c - std::io::Write::write_fmt::hc29709fdab2e34e2
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/io/mod.rs:1954:13
       8:        0x10305b2a0 - std::sys::backtrace::BacktraceLock::print::hca95bffd78053951
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/sys/backtrace.rs:42:9
       9:        0x10305c8f4 - std::panicking::default_hook::{{closure}}::h357ed4fbef22679d
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/panicking.rs:300:27
      10:        0x10305c74c - std::panicking::default_hook::h0a4e133b151d5758
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/panicking.rs:327:9
      11:        0x1030179c0 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hd52e5a21affa179d
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:1985:9
      12:        0x102ffdf94 - shuttle::runtime::failure::init_panic_hook::{{closure}}::{{closure}}::h1ab64f6baacd7740
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/runtime/failure.rs:151:13
      13:        0x1030179c0 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hd52e5a21affa179d
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:1985:9
      14:        0x10301b3a8 - generator::detail::gen::catch_unwind_filter::{{closure}}::{{closure}}::he34f8bc5fe676891
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/detail/gen.rs:19:13
      15:        0x10305d3d0 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h5576f09b2ec107bd
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/alloc/src/boxed.rs:1985:9
      16:        0x10305d3d0 - std::panicking::rust_panic_with_hook::h557a23724a5de839
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/panicking.rs:841:13
      17:        0x10305cfb0 - std::panicking::begin_panic_handler::{{closure}}::h269cace6208fef05
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/panicking.rs:706:13
      18:        0x10305b89c - std::sys::backtrace::__rust_end_short_backtrace::h5be0da278f3aaec7
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/sys/backtrace.rs:174:18
      19:        0x10305cc8c - __rustc[de2ca18b4c54d5b8]::rust_begin_unwind
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/std/src/panicking.rs:697:5
      20:        0x10316d568 - core::panicking::panic_fmt::h477ff48eff31ffa4
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/panicking.rs:75:14
      21:        0x10316d920 - core::result::unwrap_failed::h61c3c2f1df5908ff
                                   at /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs:1765:5
      22:        0x102f6bd44 - core::result::Result<T,E>::unwrap::h4cb36a2766f5cbbc
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:1167:23
      23:        0x102f6bd44 - salsa::sync::shim::Mutex<T>::lock::h097a2902e2835134
                                   at /Users/micha/astral/salsa/src/sync.rs:18:27
      24:        0x102f660d8 - salsa::function::sync::SyncTable::remove_from_map_and_unblock_queries::hcada563f686fc42d
                                   at /Users/micha/astral/salsa/src/function/sync.rs:63:36
      25:        0x102f82874 - <salsa::function::sync::ClaimGuard as core::ops::drop::Drop>::drop::hd4c1c4d155089e2a
                                   at /Users/micha/astral/salsa/src/function/sync.rs:258:18
      26:        0x102f7bc80 - core::ptr::drop_in_place<salsa::function::sync::ClaimGuard>::h99cf3acc8c597698
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:804:1
      27:        0x102f66b90 - salsa::function::sync::ClaimGuard::transfer_to::h520bf794386fe3fe
                                   at /Users/micha/astral/salsa/src/function/sync.rs:251:5
      28:        0x102ad62dc - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute::hbbba44ec316e5fb0
                                   at /Users/micha/astral/salsa/src/function/execute.rs:142:25
      29:        0x102a55840 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold::h13ddde2089e39769
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:235:25
      30:        0x102a62b0c - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold_with_retry::h5e637465ac7ae2a8
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:107:25
      31:        0x102b9957c - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::{{closure}}::hf0f240cdd97cc72e
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:64:26
      32:        0x102bbb028 - core::option::Option<T>::or_else::hac9e8fa26e9723e1
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1647:21
      33:        0x102a6c298 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::h1fdabb30fcd2c5b2
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:63:18
      34:        0x102a6c298 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch::h25e191e18b833040
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:30:25
      35:        0x102987448 - parallel::cycle_nested_deep::query_d::{{closure}}::h40a86cf268db705c
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:474:72
      36:        0x102b62e54 - salsa::attach::Attached::attach::h69191faec846a3fc
                                   at /Users/micha/astral/salsa/src/attach.rs:79:9
      37:        0x102b6235c - salsa::attach::attach::{{closure}}::hac06f2d00674a955
                                   at /Users/micha/astral/salsa/src/attach.rs:135:15
      38:        0x102b6ca60 - shuttle::thread::LocalKey<T>::try_with::h23eb8439fc5ff46f
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:445:12
      39:        0x102b6c204 - shuttle::thread::LocalKey<T>::with::hde64f90422733f82
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:420:14
      40:        0x102b612b0 - salsa::attach::attach::h00532bb5d035a688
                                   at /Users/micha/astral/salsa/src/attach.rs:133:14
      41:        0x102ba53ec - parallel::cycle_nested_deep::query_d::h997bd2d53da3594c
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:468:13
      42:        0x102ba4e88 - <parallel::cycle_nested_deep::query_c::query_c_Configuration_ as salsa::function::Configuration>::execute::inner_::h58c10d33ef43991d
                                   at /Users/micha/astral/salsa/tests/parallel/cycle_nested_deep.rs:33:19
      43:        0x102ba4e54 - <parallel::cycle_nested_deep::query_c::query_c_Configuration_ as salsa::function::Configuration>::execute::h4ba5f8612d9f040b
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:302:21
      44:        0x102a85ab0 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute_query::he7b6a65f93890411
                                   at /Users/micha/astral/salsa/src/function/execute.rs:496:25
      45:        0x102abdce8 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute_maybe_iterate::hd72c44ddb4226f70
                                   at /Users/micha/astral/salsa/src/function/execute.rs:193:17
      46:        0x102acd744 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute::h0882cee98ff091df
                                   at /Users/micha/astral/salsa/src/function/execute.rs:103:53
      47:        0x102a5ea58 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold::hd9d2da53a9b166e6
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:235:25
      48:        0x102a626e4 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold_with_retry::h5d19a0f97480a716
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:107:25
      49:        0x102b9927c - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::{{closure}}::hb6baaea8795ff477
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:64:26
      50:        0x102bbbbac - core::option::Option<T>::or_else::he0e7092c8ed529bd
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1647:21
      51:        0x102a76f0c - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::h80c760b58987550d
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:63:18
      52:        0x102a76f0c - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch::h9635af1f41ec360a
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:30:25
      53:        0x10298732c - parallel::cycle_nested_deep::query_c::{{closure}}::h743db327b9af3447
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:474:72
      54:        0x102b6313c - salsa::attach::Attached::attach::h7b6e6af58a9552b1
                                   at /Users/micha/astral/salsa/src/attach.rs:79:9
      55:        0x102b623e0 - salsa::attach::attach::{{closure}}::hb159059fba641f87
                                   at /Users/micha/astral/salsa/src/attach.rs:135:15
      56:        0x102b6de88 - shuttle::thread::LocalKey<T>::try_with::ha92a9a65177f0880
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:445:12
      57:        0x102b6bd04 - shuttle::thread::LocalKey<T>::with::h44b7eb74a13397d5
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:420:14
      58:        0x102b61bd8 - salsa::attach::attach::hda9db5db82d6abc9
                                   at /Users/micha/astral/salsa/src/attach.rs:133:14
      59:        0x102ba4da8 - parallel::cycle_nested_deep::query_c::h3b02265a48f48928
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:468:13
      60:        0x102ba4884 - <parallel::cycle_nested_deep::query_b::query_b_Configuration_ as salsa::function::Configuration>::execute::inner_::h6b773554e16a34a0
                                   at /Users/micha/astral/salsa/tests/parallel/cycle_nested_deep.rs:27:19
      61:        0x102ba4858 - <parallel::cycle_nested_deep::query_b::query_b_Configuration_ as salsa::function::Configuration>::execute::h8910c585dfff7dbe
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:302:21
      62:        0x102a83a00 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute_query::h82bd71c3502c9225
                                   at /Users/micha/astral/salsa/src/function/execute.rs:496:25
      63:        0x102ac0544 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute_maybe_iterate::he0b0c27b8f519e40
                                   at /Users/micha/astral/salsa/src/function/execute.rs:193:17
      64:        0x102ad808c - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute::hcfc0be9d4576d96c
                                   at /Users/micha/astral/salsa/src/function/execute.rs:103:53
      65:        0x102a59e60 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold::h86d35ed713468dc1
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:235:25
      66:        0x102a5f930 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold_with_retry::h024f4d8589d1f42e
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:107:25
      67:        0x102b98efc - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::{{closure}}::h0b3e80e3e74d2ab2
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:64:26
      68:        0x102bb9628 - core::option::Option<T>::or_else::h26aedad5b3c440b3
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1647:21
      69:        0x102a761c8 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::h27ce91968b58898c
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:63:18
      70:        0x102a761c8 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch::h95a0616354aa7fe5
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:30:25
      71:        0x102987210 - parallel::cycle_nested_deep::query_b::{{closure}}::h6153b3e16f6f308d
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:474:72
      72:        0x102b62b6c - salsa::attach::Attached::attach::h366c7b2a5dcaaf40
                                   at /Users/micha/astral/salsa/src/attach.rs:79:9
      73:        0x102b622d8 - salsa::attach::attach::{{closure}}::h964dbf8d43a5e190
                                   at /Users/micha/astral/salsa/src/attach.rs:135:15
      74:        0x102b6e0ec - shuttle::thread::LocalKey<T>::try_with::hb1cec56c147d7185
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:445:12
      75:        0x102b6be84 - shuttle::thread::LocalKey<T>::with::h73d1f6115f9ab512
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:420:14
      76:        0x102b61920 - salsa::attach::attach::h93d8fca84ebe8ce4
                                   at /Users/micha/astral/salsa/src/attach.rs:133:14
      77:        0x102ba47ac - parallel::cycle_nested_deep::query_b::h32a9c0dd0173785e
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:468:13
      78:        0x102ba42b8 - <parallel::cycle_nested_deep::query_a::query_a_Configuration_ as salsa::function::Configuration>::execute::inner_::he1bf9a9d0d70d65c
                                   at /Users/micha/astral/salsa/tests/parallel/cycle_nested_deep.rs:22:5
      79:        0x102ba428c - <parallel::cycle_nested_deep::query_a::query_a_Configuration_ as salsa::function::Configuration>::execute::hb8e48c7382c38d64
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:302:21
      80:        0x102a82368 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute_query::h05c8c4ff8708fa62
                                   at /Users/micha/astral/salsa/src/function/execute.rs:496:25
      81:        0x102ab63c4 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute_maybe_iterate::hca1607161050f543
                                   at /Users/micha/astral/salsa/src/function/execute.rs:193:17
      82:        0x102ad1a54 - salsa::function::execute::<impl salsa::function::IngredientImpl<C>>::execute::h5653235854bec89a
                                   at /Users/micha/astral/salsa/src/function/execute.rs:103:53
      83:        0x102a5c748 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold::hbc17d262a9d424a9
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:235:25
      84:        0x102a658c0 - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch_cold_with_retry::hd7906d66d64c34fc
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:107:25
      85:        0x102b993fc - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::{{closure}}::hdc8bdbb7481cf939
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:64:26
      86:        0x102bb94a0 - core::option::Option<T>::or_else::h15945e711ff49ebb
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1647:21
      87:        0x102a739fc - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::refresh_memo::h349052041dfaba5e
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:63:18
      88:        0x102a739fc - salsa::function::fetch::<impl salsa::function::IngredientImpl<C>>::fetch::h728018c20576397e
                                   at /Users/micha/astral/salsa/src/function/fetch.rs:30:25
      89:        0x1029870f4 - parallel::cycle_nested_deep::query_a::{{closure}}::ha800b79161cac59a
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:474:72
      90:        0x102b63ce8 - salsa::attach::Attached::attach::he620d3afe8a50323
                                   at /Users/micha/astral/salsa/src/attach.rs:79:9
      91:        0x102b61e40 - salsa::attach::attach::{{closure}}::h20e17dcbdc3a27b2
                                   at /Users/micha/astral/salsa/src/attach.rs:135:15
      92:        0x102b6e6d4 - shuttle::thread::LocalKey<T>::try_with::hf3c4ce4a35f86079
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:445:12
      93:        0x102b6be44 - shuttle::thread::LocalKey<T>::with::h5bd597852a578503
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:420:14
      94:        0x102b61ce4 - salsa::attach::attach::hf42685a6fc5d40f0
                                   at /Users/micha/astral/salsa/src/attach.rs:133:14
      95:        0x102ba41e0 - parallel::cycle_nested_deep::query_a::h201ed8e9c820a879
                                   at /Users/micha/astral/salsa/components/salsa-macro-rules/src/setup_tracked_fn.rs:468:13
      96:        0x102988750 - parallel::cycle_nested_deep::the_test::{{closure}}::{{closure}}::hbf2d3e584c9b4e22
                                   at /Users/micha/astral/salsa/tests/parallel/cycle_nested_deep.rs:74:26
      97:        0x102b7d8d0 - shuttle::thread::thread_fn::h31e827a0fc773584
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:201:15
      98:        0x102b76d70 - shuttle::thread::spawn_named_unchecked::{{closure}}::heedde6390fb24d2c
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/thread.rs:175:53
      99:        0x102d722fc - core::ops::function::FnOnce::call_once{{vtable.shim}}::h96b74a75ee21dfbb
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5
     100:        0x102ff23d8 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hbca787c54f965c07
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:1971:9
     101:        0x102feebd0 - shuttle::runtime::thread::continuation::Continuation::new::{{closure}}::h01859c82a029cf19
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shuttle-0.8.1/src/runtime/thread/continuation.rs:87:21
     102:        0x102feab4c - generator::gen_impl::GeneratorImpl<A,T>::init_code::{{closure}}::h927832c2239e7fd9
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/gen_impl.rs:357:21
     103:        0x103013914 - generator::stack::StackBox<F>::call_once::hdd06bfd95f3ee05c
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/stack/mod.rs:137:13
     104:        0x103017fbc - generator::stack::Func::call_once::hec563a107185d2b2
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/stack/mod.rs:119:9
     105:        0x10301b4ec - generator::detail::gen::gen_init_impl::{{closure}}::h76b877cffa1d3211
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/detail/gen.rs:35:14
     106:        0x103019818 - core::ops::function::FnOnce::call_once::h7d40e201be73c99b
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5
     107:        0x103015bcc - std::panicking::catch_unwind::do_call::h8d597d3211a2c793
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/panicking.rs:589:40
     108:        0x10301c1f8 - ___rust_try
     109:        0x103019104 - std::panicking::catch_unwind::h377e053cf722b98d
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/panicking.rs:552:19
     110:        0x103019104 - std::panic::catch_unwind::ha1b33f20c29c2bc6
                                   at /Users/micha/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/panic.rs:359:14
     111:        0x10301b27c - generator::detail::gen::catch_unwind_filter::heff4f697a497fc75
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/detail/gen.rs:23:5
     112:        0x10301b3e4 - generator::detail::gen::gen_init_impl::h25bd90fa33700d57
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/detail/gen.rs:50:25
     113:        0x10301b134 - generator::detail::asm::gen_init::h7e777eabb9be3c19
                                   at /Users/micha/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generator-0.8.7/src/detail/aarch64_unix.rs:18:5

    thread 'cycle_nested_deep::the_test' panicked at library/core/src/panicking.rs:233:5:
    panic in a destructor during cleanup
    thread caused non-unwinding panic. aborting.

    (test aborted with signal 6: SIGABRT)

  Cancelling due to test failure
────────────
     Summary [   0.332s] 1 test run: 0 passed, 1 failed, 8 skipped
     SIGABRT [   0.331s] salsa::parallel cycle_nested_deep::the_test
error: test run failed
